[
    $literals: [
        "peg A"
        $type
        $Stack(
            $Number($range: [1..infinity])
        )
        $Number($range: [1..infinity])
        $range
        1
        infinity
        "peg B"
        "peg C"
        $pegs
        $steps
        "Move disk {disk} from {fromPeg} to {toPeg}."
    ]
    $constants: [:]
    $procedures: [
        $play: [
            $parameters: []
            $variables: [
                $$iterator-1
                $$result
                $n
                $numberOfDisks
                $target
            ]
            $procedures: [
                $asCatalog
                $getNext
                $hasNext
                $iterator
                $moveTower
                $push
            ]
            $addresses: [
                "1.EvaluateStatement": 1
                "2.EvaluateStatement": 69
                "3.WithStatement": 71
                "3.1.ConditionClause": 76
                "3.1.1.EvaluateStatement": 82
                "3.ConditionRepeat": 93
                "3.WithStatementDone": 94
                "4.EvaluateStatement": 95
                "5.ReturnStatement": 108
            ]
            $instructions: "
                1.EvaluateStatement:
                INVOKE $Catalog
                PUSH LITERAL `"peg A"`
                INVOKE $List
                INVOKE $Catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `$Stack(
                    $Number($range: [1..infinity])
                )`
                INVOKE $List
                PUSH LITERAL `$Number($range: [1..infinity])`
                INVOKE $Catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $Range WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                PUSH LITERAL `"peg B"`
                INVOKE $List
                INVOKE $Catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `$Stack(
                    $Number($range: [1..infinity])
                )`
                INVOKE $List
                PUSH LITERAL `$Number($range: [1..infinity])`
                INVOKE $Catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $Range WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                PUSH LITERAL `"peg C"`
                INVOKE $List
                INVOKE $Catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `$Stack(
                    $Number($range: [1..infinity])
                )`
                INVOKE $List
                PUSH LITERAL `$Number($range: [1..infinity])`
                INVOKE $Catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $Range WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                
                2.EvaluateStatement:
                INVOKE $List
                INVOKE $setValue WITH 3 PARAMETERS
                
                3.WithStatement:
                LOAD VARIABLE $numberOfDisks
                PUSH LITERAL `1`
                INVOKE $Range WITH 2 PARAMETERS
                EXECUTE $iterator ON TARGET
                STORE VARIABLE $$iterator-1
                
                3.1.ConditionClause:
                LOAD VARIABLE $$iterator-1
                EXECUTE $hasNext ON TARGET
                JUMP TO 3.WithStatementDone ON FALSE
                LOAD VARIABLE $$iterator-1
                EXECUTE $getNext ON TARGET
                STORE VARIABLE $n
                
                3.1.1.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$pegs`
                INVOKE $getValue WITH 2 PARAMETERS
                PUSH LITERAL `"peg A"`
                INVOKE $getValue WITH 2 PARAMETERS
                INVOKE $List
                LOAD VARIABLE $n
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $push ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                3.ConditionRepeat:
                JUMP TO 3.1.ConditionClause
                
                3.WithStatementDone:
                SKIP INSTRUCTION
                
                4.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $List
                LOAD VARIABLE $numberOfDisks
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg A"`
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg C"`
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg B"`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                5.ReturnStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$steps`
                INVOKE $getValue WITH 2 PARAMETERS
                EXECUTE $asCatalog ON TARGET
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                A0042801A007A00428022803A0072804A004280528062807B00EB830A80A
                B02FB018A80AB02FB830A80AB02FB8302808A007A00428022803A0072804
                A004280528062807B00EB830A80AB02FB018A80AB02FB830A80AB02FB830
                2809A007A00428022803A0072804A004280528062807B00EB830A80AB02F
                B018A80AB02FB830A80AB02FB830B830A007B83060042806B00ED0048001
                6001D003185E6001D00280036005280AB0212801B021A0076003B018A80A
                D8068002004C00006005A0076004B0182801B0182809B0182808B018A80A
                D80580026005280BB021D001E000
            '(
                $base: 16
                $mediatype: "application/bcod"
            )
        ]
        $moveTower: [
            $parameters: [
                $height
                $fromPeg
                $toPeg
                $withPeg
            ]
            $variables: [$$result, $target]
            $procedures: [$moveDisk, $moveTower]
            $addresses: [
                "1.IfStatement": 1
                "1.1.ConditionClause": 2
                "1.1.1.EvaluateStatement": 4
                "1.1.2.EvaluateStatement": 19
                "1.1.3.EvaluateStatement": 28
                "1.IfStatementDone": 43
            ]
            $instructions: "
                1.IfStatement:
                SKIP INSTRUCTION
                
                1.1.ConditionClause:
                PUSH PARAMETER $height
                JUMP TO 1.IfStatementDone ON FALSE
                
                1.1.1.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $List
                PUSH PARAMETER $height
                PUSH LITERAL `1`
                INVOKE $difference WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $withPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.1.2.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $List
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $moveDisk ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.1.3.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $List
                PUSH PARAMETER $height
                PUSH LITERAL `1`
                INVOKE $difference WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $withPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.IfStatementDone:
                LOAD VARIABLE $$result
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                00003801182B6002A00738012806B01DB0183802B0183804B0183803B018
                A80AD80280016002A0073802B0183803B018A80AD80180016002A0073801
                2806B01DB0183804B0183803B0183802B018A80AD80280016001E000
            '(
                $base: 16
                $mediatype: "application/bcod"
            )
        ]
        $moveDisk: [
            $parameters: [$fromPeg, $toPeg]
            $variables: [
                $$result
                $disk
                $target
            ]
            $procedures: [$append, $pop, $push]
            $addresses: [
                "1.EvaluateStatement": 1
                "2.EvaluateStatement": 8
                "3.EvaluateStatement": 19
            ]
            $instructions: "
                1.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$pegs`
                INVOKE $getValue WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $getValue WITH 2 PARAMETERS
                EXECUTE $pop ON TARGET
                STORE VARIABLE $disk
                
                2.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$pegs`
                INVOKE $getValue WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $getValue WITH 2 PARAMETERS
                INVOKE $List
                LOAD VARIABLE $disk
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $push ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                3.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$steps`
                INVOKE $getValue WITH 2 PARAMETERS
                INVOKE $List
                PUSH LITERAL `"Move disk {disk} from {fromPeg} to {toPeg}."`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $Parameters WITH PARAMETER
                EXECUTE $append ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                LOAD VARIABLE $$result
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                6003280AB0213801B021D00280026003280AB0213802B021A0076002B018
                A80AD80380016003280BB021A007280CB018A80AD80180016001E000
            '(
                $base: 16
                $mediatype: "application/bcod"
            )
        ]
    ]
]
