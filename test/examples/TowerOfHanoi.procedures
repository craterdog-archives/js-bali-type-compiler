[
    $literals: [
        "peg A"
        $type
        $Stack
        $Number
        $range
        1
        infinity
        "peg B"
        "peg C"
        $pegs
        $steps
        "Move disk {disk} from {fromPeg} to {toPeg}."
    ]
    $constants: [:]
    $procedures: [
        $play: [
            $parameters: []
            $variables: [
                $$iterator-1
                $$result
                $n
                $numberOfDisks
                $target
            ]
            $procedures: [
                $asCatalog
                $getIterator
                $getNext
                $hasNext
                $moveTower
                $push
            ]
            $addresses: [
                "1.EvaluateStatement": 1
                "2.EvaluateStatement": 66
                "3.WithStatement": 68
                "3.1.ConditionClause": 73
                "3.1.1.EvaluateStatement": 79
                "3.ConditionRepeat": 90
                "3.WithStatementDone": 91
                "4.EvaluateStatement": 92
                "5.ReturnStatement": 105
            ]
            $instructions: "
                1.EvaluateStatement:
                INVOKE $catalog
                PUSH LITERAL `"peg A"`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `$Stack`
                INVOKE $list
                PUSH LITERAL `$Number`
                INVOKE $catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $range WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $list WITH PARAMETER
                INVOKE $setValue WITH 3 PARAMETERS
                PUSH LITERAL `"peg B"`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `$Stack`
                INVOKE $list
                PUSH LITERAL `$Number`
                INVOKE $catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $range WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $list WITH PARAMETER
                INVOKE $setValue WITH 3 PARAMETERS
                PUSH LITERAL `"peg C"`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `$Stack`
                INVOKE $list
                PUSH LITERAL `$Number`
                INVOKE $catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $range WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $list WITH PARAMETER
                INVOKE $setValue WITH 3 PARAMETERS
                INVOKE $setSubcomponent WITH 3 PARAMETERS
                
                2.EvaluateStatement:
                INVOKE $list
                INVOKE $setSubcomponent WITH 3 PARAMETERS
                
                3.WithStatement:
                LOAD VARIABLE $numberOfDisks
                PUSH LITERAL `1`
                INVOKE $range WITH 2 PARAMETERS
                EXECUTE $getIterator ON TARGET
                STORE VARIABLE $$iterator-1
                
                3.1.ConditionClause:
                LOAD VARIABLE $$iterator-1
                EXECUTE $hasNext ON TARGET
                JUMP TO 3.WithStatementDone ON FALSE
                LOAD VARIABLE $$iterator-1
                EXECUTE $getNext ON TARGET
                STORE VARIABLE $n
                
                3.1.1.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$pegs`
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                PUSH LITERAL `"peg A"`
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                INVOKE $list
                LOAD VARIABLE $n
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $push ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                3.ConditionRepeat:
                JUMP TO 3.1.ConditionClause
                
                3.WithStatementDone:
                SKIP INSTRUCTION
                
                4.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                LOAD VARIABLE $numberOfDisks
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg A"`
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg C"`
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg B"`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                5.ReturnStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$steps`
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                EXECUTE $asCatalog ON TARGET
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                A00B2801A00B28022803A03D2804A00B280528062807B051B866A845B064
                B002A845B064B866A845A83DB8662808A00B28022803A03D2804A00B2805
                28062807B051B866A845B064B002A845B064B866A845A83DB8662809A00B
                28022803A03D2804A00B280528062807B051B866A845B064B002A845B064
                B866A845A83DB866B865A03DB86560042806B051D00280016001D004185B
                6001D00380036005280AB02A2801B02AA03D6003B002A845D80680020049
                00006005A03D6004B0022801B0022809B0022808B002A845D80580026005
                280BB02AD001E000
            '(
                $base: 16
                $mediatype: "application/bcod"
            )
        ]
        $moveTower: [
            $parameters: [
                $height
                $fromPeg
                $toPeg
                $withPeg
            ]
            $variables: [$$result, $target]
            $procedures: [$moveDisk, $moveTower]
            $addresses: [
                "1.IfStatement": 1
                "1.1.ConditionClause": 2
                "1.1.1.EvaluateStatement": 4
                "1.1.2.EvaluateStatement": 19
                "1.1.3.EvaluateStatement": 28
                "1.IfStatementDone": 43
            ]
            $instructions: "
                1.IfStatement:
                SKIP INSTRUCTION
                
                1.1.ConditionClause:
                PUSH PARAMETER $height
                JUMP TO 1.IfStatementDone ON FALSE
                
                1.1.1.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH PARAMETER $height
                PUSH LITERAL `1`
                INVOKE $difference WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $withPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.1.2.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveDisk ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.1.3.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH PARAMETER $height
                PUSH LITERAL `1`
                INVOKE $difference WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $withPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.IfStatementDone:
                LOAD VARIABLE $$result
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                00003801182B6002A03D38012806B016B0023802B0023804B0023803B002
                A845D80280016002A03D3802B0023803B002A845D80180016002A03D3801
                2806B016B0023804B0023803B0023802B002A845D80280016001E000
            '(
                $base: 16
                $mediatype: "application/bcod"
            )
        ]
        $moveDisk: [
            $parameters: [$fromPeg, $toPeg]
            $variables: [
                $$result
                $disk
                $target
            ]
            $procedures: [$append, $pop, $push]
            $addresses: [
                "1.EvaluateStatement": 1
                "2.EvaluateStatement": 8
                "3.EvaluateStatement": 19
            ]
            $instructions: "
                1.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$pegs`
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                EXECUTE $pop ON TARGET
                STORE VARIABLE $disk
                
                2.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$pegs`
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                INVOKE $list
                LOAD VARIABLE $disk
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $push ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                3.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$steps`
                INVOKE $getSubcomponent WITH 2 PARAMETERS
                INVOKE $list
                PUSH LITERAL `"Move disk {disk} from {fromPeg} to {toPeg}."`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $append ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                LOAD VARIABLE $$result
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                6003280AB02A3801B02AD00280026003280AB02A3802B02AA03D6002B002
                A845D80380016003280BB02AA03D280CB002A845D80180016001E000
            '(
                $base: 16
                $mediatype: "application/bcod"
            )
        ]
    ]
]
