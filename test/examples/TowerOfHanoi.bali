[
    $description: "
        This class encapsulates a /Tower of Hanoi/ game with three pegs (A, B, and C) and a
        parameterized number of disks. To play the game do the following:
         # Initialize a game with 3 disks.
        `$game := [:]($type: $TowerOfHanoi, $numberOfDisks: 3)`
         # Play the game.
        `game.play()`
        
        The output should be:
        `
         1. Move top disk on peg A to peg C
         2. Move top disk on peg A to peg B
         3. Move top disk on peg C to peg B
         4. Move top disk on peg A to peg C
         5. Move top disk on peg B to peg A
         6. Move top disk on peg B to peg C
         7. Move top disk on peg A to peg C
        `
    "(
        $mediatype: "application/bsmd"
    )
    $parameters: [
        $numberOfDisks: [
            $description: "The number of disks."
            $type: $Number($range: [1..infinity])
            $default: 5
        ]
    ]
    $attributes: [
        $pegs: [
            $description: "The three pegs (A, B and C) that are used to hold the disks."
            $type: $Catalog(
                $Symbol
                $Stack($Number($range: [1..infinity]))
            )
        ]
        $steps: [
            $description: "The steps needed to move the disks."
            $type: $List($Text)
        ]
    ]
    $procedures: [
        $play: [
            $description: "This procedure causes the game to (re)initialize itself and play the game."
            $result: $Catalog(
                $Number($range: [1..infinity])
                $Text
            )
            $source: {
                target[$pegs] := [
                    "peg A": [](
                        $type: $Stack($Number($range: [1..infinity]))
                    )
                    "peg B": [](
                        $type: $Stack($Number($range: [1..infinity]))
                    )
                    "peg C": [](
                        $type: $Stack($Number($range: [1..infinity]))
                    )
                ]
                target[$steps] := []
                with each $n in [numberOfDisks..1] do {
                    target[$pegs, "peg A"].push(n)
                }
                target.moveTower(
                    numberOfDisks
                    "peg A"
                    "peg C"
                    "peg B"
                )
                return target[$steps].asCatalog()
            }
        ]
        $moveTower: [
            $description: "This procedure causes the game to move a tower of disks of a certain height from one peg to another peg using a third peg as a buffer."
            $parameters: [
                $height: [
                    $description: "The height of the tower to be moved."
                    $type: $Number($range: [1..infinity])
                ]
                $fromPeg: [
                    $description: "The peg from which the disks originate."
                    $type: $Text
                ]
                $toPeg: [
                    $description: "The peg to which the disks should be moved."
                    $type: $Text
                ]
                $withPeg: [
                    $description: "The peg to use to buffer the disks during the move."
                    $type: $Text
                ]
            ]
            $source: {
                if height then {
                    target.moveTower(
                        height - 1
                        fromPeg
                        withPeg
                        toPeg
                    )
                    target.moveDisk(fromPeg, toPeg)
                    target.moveTower(
                        height - 1
                        withPeg
                        toPeg
                        fromPeg
                    )
                }
            }(
                $height
                $fromPeg
                $toPeg
                $withPeg
            )
        ]($private)
        $moveDisk: [
            $description: "This procedure causes the game to move the top disk from one peg to another."
            $parameters: [
                $fromPeg: [
                    $description: "The peg from which the disk originates."
                    $type: $Text
                ]
                $toPeg: [
                    $description: "The peg to which the disk should be moved."
                    $type: $Text
                ]
            ]
            $source: {
                $disk := target[$pegs, fromPeg].pop()
                target[$pegs, toPeg].push(disk)
                target[$steps].append(
                    "Move disk {disk} from {fromPeg} to {toPeg}."
                )
            }(
                $fromPeg
                $toPeg
            )
        ]($private)
    ]
](
    $name: $TowerOfHanoi
    $type: $Class
    $tag: #1M9WB8VXAWP8A0T1K3MHWD4ZFBM3MG7T
    $version: v1
    $permissions: $Public
    $previous: none
)
