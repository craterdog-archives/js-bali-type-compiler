---- Skips to the next instruction.
SKIP INSTRUCTION

1.jump:
---- Jumps to a new address (conditionally).
JUMP TO 2.push
JUMP TO 3.pull ON NONE
JUMP TO 4.load ON TRUE
JUMP TO 5.save ON FALSE

2.push:
---- Pushes an item onto a stack.
PUSH HANDLER 6.drop
PUSH LITERAL `"This is a literal text string\ncontaining an \` and spanning multiple lines."`
PUSH LITERAL `{
    $foo := bar
    $bar := baz
    $baz := foo
}($bar: 5)`
PUSH CONSTANT $constant
PUSH ARGUMENT $argument

3.pull:
---- Pulls the top item from a stack.
PULL HANDLER
PULL COMPONENT
PULL RESULT
PULL EXCEPTION

4.load:
---- Loads an item from the environment onto a stack.
LOAD REGISTER $variable
LOAD DOCUMENT $citation
LOAD CONTRACT $name
LOAD MESSAGE $bag

5.save:
---- Saves the top item from a stack into the environment.
SAVE REGISTER $variable
SAVE DOCUMENT $citation
SAVE CONTRACT $name
SAVE MESSAGE $bag

6.drop:
---- Drops an item from the environment.
DROP REGISTER $variable
DROP DOCUMENT $citation
DROP CONTRACT $name
DROP MESSAGE $citation

7.call:
---- Calls an intrinsic function with 0 to 3 arguments.
CALL $now
CALL $factorial WITH 1 ARGUMENT
CALL $sum WITH 2 ARGUMENTS
CALL $range WITH 3 ARGUMENTS

8.send:
---- Sends a message to a target component with optional arguments.
SEND $getKeys TO CONTRACT
SEND $setValue TO CONTRACT WITH ARGUMENTS
SEND $getAncestry TO COMPONENT
SEND $setParameter TO COMPONENT WITH ARGUMENTS
