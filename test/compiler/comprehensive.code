[
    $parameters: [
        $foo
    ]
    $variables: [
        $$iterator-1
        $$result
        $$selector-2
        $a
        $b
        $bar
        $c
        $count
        $d
        $exception
        $foo
        $item
        $selection
        $sequence
        $tag
        $target
    ]($type: /bali/collections/Set/v1)
    $procedures: [
        $find
        $getIterator
        $getNext
        $hasNext
    ]($type: /bali/collections/Set/v1)
    $addresses: [
        "1.IfStatement": 1
        "1.1.ConditionClause": 2
        "1.1.1.EvaluateStatement": 6
        "1.1.2.EvaluateStatement": 8
        "1.1.3.ThrowStatement": 10
        "1.1.ConditionClauseDone": 12
        "1.2.ConditionClause": 13
        "1.2.1.EvaluateStatement": 17
        "1.2.2.EvaluateStatement": 19
        "1.2.3.ReturnStatement": 22
        "1.2.ConditionClauseDone": 24
        "1.3.ElseClause": 25
        "1.3.1.EvaluateStatement": 26
        "1.3.2.EvaluateStatement": 32
        "1.3.3.ReturnStatement": 34
        "1.3.ElseClauseDone": 36
        "1.IfStatementDone": 37
        "1.IfStatementHandlers": 39
        "1.4.HandleClause": 40
        "1.4.1.EvaluateStatement": 51
        "1.4.2.EvaluateStatement": 55
        "1.4.HandleClauseDone": 65
        "1.5.HandleClause": 66
        "1.5.1.EvaluateStatement": 77
        "1.5.2.ThrowStatement": 87
        "1.5.HandleClauseDone": 89
        "1.IfStatementFailed": 90
        "1.IfStatementSucceeded": 91
        "2.WhileStatement": 92
        "2.1.ConditionClause": 93
        "2.1.1.EvaluateStatement": 95
        "2.1.2.IfStatement": 97
        "2.1.2.1.ConditionClause": 98
        "2.1.2.1.1.BreakStatement": 100
        "2.1.2.1.ConditionClauseDone": 101
        "2.1.2.2.ElseClause": 102
        "2.1.2.2.1.WithStatement": 103
        "2.1.2.2.1.1.ConditionClause": 106
        "2.1.2.2.1.1.1.SelectStatement": 112
        "2.1.2.2.1.1.1.1.OptionClause": 114
        "2.1.2.2.1.1.1.1.1.EvaluateStatement": 118
        "2.1.2.2.1.1.1.1.OptionClauseDone": 120
        "2.1.2.2.1.1.1.2.OptionClause": 121
        "2.1.2.2.1.1.1.2.1.EvaluateStatement": 125
        "2.1.2.2.1.1.1.2.OptionClauseDone": 127
        "2.1.2.2.1.1.1.3.ElseClause": 128
        "2.1.2.2.1.1.1.3.1.ContinueStatement": 129
        "2.1.2.2.1.1.1.3.ElseClauseDone": 130
        "2.1.2.2.1.1.1.SelectStatementDone": 131
        "2.1.2.2.1.ConditionRepeat": 132
        "2.1.2.2.1.WithStatementDone": 133
        "2.1.2.2.ElseClauseDone": 134
        "2.1.2.IfStatementDone": 135
        "2.ConditionRepeat": 136
        "2.WhileStatementDone": 137
    ]
    $instructions: "
        1.IfStatement:
        PUSH HANDLER 1.IfStatementHandlers
        
        1.1.ConditionClause:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $isLessThan WITH 2 ARGUMENTS
        JUMP TO 1.2.ConditionClause ON FALSE
        
        1.1.1.EvaluateStatement:
        LOAD VARIABLE $b
        STORE VARIABLE $a
        
        1.1.2.EvaluateStatement:
        PUSH LITERAL `{
            $foo := bar
            $bar := baz
        }`
        STORE VARIABLE $b
        
        1.1.3.ThrowStatement:
        LOAD VARIABLE $exception
        HANDLE EXCEPTION
        
        1.1.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.2.ConditionClause:
        LOAD VARIABLE $a
        PUSH LITERAL `0`
        INVOKE $isMoreThan WITH 2 ARGUMENTS
        JUMP TO 1.3.ElseClause ON FALSE
        
        1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        STORE VARIABLE $$result
        
        1.2.2.EvaluateStatement:
        LOAD VARIABLE $b
        INVOKE $factorial WITH ARGUMENT
        STORE VARIABLE $c
        
        1.2.3.ReturnStatement:
        LOAD VARIABLE $c
        HANDLE RESULT
        
        1.2.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.3.ElseClause:
        SKIP INSTRUCTION
        
        1.3.1.EvaluateStatement:
        LOAD VARIABLE $b
        INVOKE $list
        LOAD VARIABLE $tag
        INVOKE $addItem WITH 2 ARGUMENTS
        EXECUTE $find ON TARGET WITH ARGUMENTS
        STORE VARIABLE $d
        
        1.3.2.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        STORE VARIABLE $$result
        
        1.3.3.ReturnStatement:
        PUSH LITERAL `none`
        HANDLE RESULT
        
        1.3.ElseClauseDone:
        SKIP INSTRUCTION
        
        1.IfStatementDone:
        POP HANDLER
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementHandlers:
        SKIP INSTRUCTION
        
        1.4.HandleClause:
        STORE VARIABLE $exception
        LOAD VARIABLE $exception
        LOAD VARIABLE $exception
        INVOKE $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$warning`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        INVOKE $isMatchedBy WITH 2 ARGUMENTS
        JUMP TO 1.5.HandleClause ON FALSE
        POP COMPONENT
        
        1.4.1.EvaluateStatement:
        LOAD VARIABLE $count
        PUSH LITERAL `1`
        INVOKE $sum WITH 2 ARGUMENTS
        STORE VARIABLE $count
        
        1.4.2.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something not too serious happened."`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        PUSH LITERAL `$exception`
        LOAD VARIABLE $exception
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        1.4.HandleClauseDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.5.HandleClause:
        STORE VARIABLE $exception
        LOAD VARIABLE $exception
        LOAD VARIABLE $exception
        INVOKE $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$moderate`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        INVOKE $isMatchedBy WITH 2 ARGUMENTS
        JUMP TO 1.IfStatementFailed ON FALSE
        POP COMPONENT
        
        1.5.1.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something serious happened."`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        PUSH LITERAL `$exception`
        LOAD VARIABLE $exception
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        STORE VARIABLE $exception
        
        1.5.2.ThrowStatement:
        LOAD VARIABLE $exception
        HANDLE EXCEPTION
        
        1.5.HandleClauseDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementFailed:
        HANDLE EXCEPTION
        
        1.IfStatementSucceeded:
        SKIP INSTRUCTION
        
        2.WhileStatement:
        SKIP INSTRUCTION
        
        2.1.ConditionClause:
        PUSH LITERAL `true`
        JUMP TO 2.WhileStatementDone ON FALSE
        
        2.1.1.EvaluateStatement:
        LOAD VARIABLE $bar
        STORE VARIABLE $foo
        
        2.1.2.IfStatement:
        SKIP INSTRUCTION
        
        2.1.2.1.ConditionClause:
        PUSH PARAMETER $foo
        JUMP TO 2.1.2.2.ElseClause ON FALSE
        
        2.1.2.1.1.BreakStatement:
        JUMP TO 2.WhileStatementDone
        
        2.1.2.1.ConditionClauseDone:
        JUMP TO 2.1.2.IfStatementDone
        
        2.1.2.2.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.WithStatement:
        LOAD VARIABLE $sequence
        EXECUTE $getIterator ON TARGET
        STORE VARIABLE $$iterator-1
        
        2.1.2.2.1.1.ConditionClause:
        LOAD VARIABLE $$iterator-1
        EXECUTE $hasNext ON TARGET
        JUMP TO 2.1.2.2.1.WithStatementDone ON FALSE
        LOAD VARIABLE $$iterator-1
        EXECUTE $getNext ON TARGET
        STORE VARIABLE $item
        
        2.1.2.2.1.1.1.SelectStatement:
        LOAD VARIABLE $selection
        STORE VARIABLE $$selector-2
        
        2.1.2.2.1.1.1.1.OptionClause:
        LOAD VARIABLE $$selector-2
        PUSH LITERAL `$first`
        INVOKE $isMatchedBy WITH 2 ARGUMENTS
        JUMP TO 2.1.2.2.1.1.1.2.OptionClause ON FALSE
        
        2.1.2.2.1.1.1.1.1.EvaluateStatement:
        PUSH LITERAL `true`
        STORE VARIABLE $$result
        
        2.1.2.2.1.1.1.1.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.2.OptionClause:
        LOAD VARIABLE $$selector-2
        PUSH LITERAL `$second`
        INVOKE $isMatchedBy WITH 2 ARGUMENTS
        JUMP TO 2.1.2.2.1.1.1.3.ElseClause ON FALSE
        
        2.1.2.2.1.1.1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        STORE VARIABLE $$result
        
        2.1.2.2.1.1.1.2.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.3.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.1.1.3.1.ContinueStatement:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.1.1.3.ElseClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.SelectStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.1.ConditionRepeat:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.WithStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.ElseClauseDone:
        SKIP INSTRUCTION
        
        2.1.2.IfStatementDone:
        SKIP INSTRUCTION
        
        2.ConditionRepeat:
        JUMP TO 2.1.ConditionClause
        
        2.WhileStatementDone:
        LOAD VARIABLE $$result
        HANDLE RESULT
    "($mediatype: "application/basm")
    $bytecode: '
        202760046005B044180D6005800428018005600AE800002560042802B046
        1819280380026005A81E80076007E000002500006005A04C600FB002D801
        8009280480022805E00000004000005B0000800A600A600AA00F28062807
        B009B002B0451842480060082808B07E8008A00F2809280AB009B002280B
        600AB009B0028002005B800A600A600AA00F2806280CB009B002B045185A
        4800A00F2809280DB009B002280B600AB009B002800A600AE800005BE800
        00000000280E18896006800B000038011866008900870000600ED0028001
        6001D00418856001D003800C600D80036003280FB0451879280E80020083
        60032810B04518802803800200830000006A00830000006A000000000000
        005D6002E000
    '(
        $encoding: $base16
        $mediatype: "application/bcod"
    )
]
