[
    $procedure: {
        post $message to /acme/messages/v1.2.3
        retrieve $message from /acme/messages/v1.2.3
        reject message
        retrieve messages[$foo, 5] from /acme/messages/v1.2.3
        accept message
    }
    $instructions: "
        1.PostStatement:
        ---- Save the name of the message bag.
        PUSH LITERAL `/acme/messages/v1.2.3`
        SAVE REGISTER $bag-2
        ---- Post a message to the named message bag.
        PUSH LITERAL `$message`
        SAVE MESSAGE $bag-2
        
        2.RetrieveStatement:
        ---- Save the name of the message bag.
        PUSH LITERAL `/acme/messages/v1.2.3`
        SAVE REGISTER $bag-3
        ---- Place a message from the message bag on the stack.
        ---- NOTE: this call blocks until a message is available from the bag.
        LOAD MESSAGE $bag-3
        SAVE REGISTER $message
        
        3.RejectStatement:
        ---- Save the message to be rejected.
        LOAD REGISTER $message
        SAVE REGISTER $message-4
        ---- Extract and save the name of the message bag.
        LOAD REGISTER $message-4
        PUSH LITERAL `$bag`
        CALL $keyValue WITH 2 ARGUMENTS
        SAVE REGISTER $bag-5
        ---- Extract and save the version string for the message.
        LOAD REGISTER $message-4
        PUSH LITERAL `$version`
        CALL $parameter WITH 2 ARGUMENTS
        CALL $nextVersion WITH 1 ARGUMENT
        SAVE REGISTER $version-6
        ---- Set the new version string parameter for the message.
        LOAD REGISTER $message-4
        PUSH LITERAL `$version`
        LOAD REGISTER $version-6
        CALL $setParameter WITH 3 ARGUMENTS
        ---- Post the new version of the message to the named message bag.
        LOAD REGISTER $message-4
        SAVE MESSAGE $bag-5
        
        4.RetrieveStatement:
        ---- Save the name of the message bag.
        PUSH LITERAL `/acme/messages/v1.2.3`
        SAVE REGISTER $bag-7
        ---- Place the recipient and the index of its subcomponent on the stack.
        LOAD REGISTER $messages
        PUSH LITERAL `$foo`
        CALL $subcomponent WITH 2 ARGUMENTS
        PUSH LITERAL `5`
        ---- Place a message from the message bag on the stack.
        ---- NOTE: this call blocks until a message is available from the bag.
        LOAD MESSAGE $bag-7
        ---- Assign the result as the value of the subcomponent.
        CALL $setSubcomponent WITH 3 ARGUMENTS
        PULL COMPONENT
        
        5.AcceptStatement:
        ---- Save the message to be accepted.
        LOAD REGISTER $message
        SAVE REGISTER $message-8
        ---- Extract and save the name of the message bag.
        LOAD REGISTER $message-8
        PUSH LITERAL `$bag`
        CALL $keyValue WITH 2 ARGUMENTS
        SAVE REGISTER $bag-9
        ---- Drop the message from the named message bag.
        LOAD REGISTER $message-8
        DROP MESSAGE $bag-9
        LOAD REGISTER $result-1
        PULL RESULT
    "($mediaType: "application/basm")
    $addresses: [
        "1.PostStatement": 1
        "2.RetrieveStatement": 5
        "3.RejectStatement": 9
        "4.RetrieveStatement": 26
        "5.AcceptStatement": 35
    ]
    $bytecode: '
        280180012802980128018002780280066006800760072804D04D80036007
        2805D060C85B800B60072805600BD882600798032801800460092808D08B
        28097804D88348006006800860082804D04D80056008B805600A5000
    '(
        $encoding: $base16
        $mediaType: "application/bcod"
    )
    $arguments: [
        $target
    ]
    $variables: [
        $bag-2
        $bag-3
        $bag-5
        $bag-7
        $bag-9
        $message
        $message-4
        $message-8
        $messages
        $result-1
        $version-6
    ]($type: /bali/collections/Set/v1)
    $messages: [ ]($type: /bali/collections/Set/v1)
]
