[
    $procedure: {
        while condition do {
            $a := b
            if a then {
                break loop
            }
            $a := c
        }
    }
    $instructions: "
        1.WhileStatement:
        JUMP TO NEXT INSTRUCTION
        
        1.1.ConditionClause:
        LOAD REGISTER $condition
        JUMP TO 1.WhileStatementDone ON FALSE
        
        1.1.1.EvaluateStatement:
        LOAD REGISTER $b
        SAVE REGISTER $a
        
        1.1.2.IfStatement:
        JUMP TO NEXT INSTRUCTION
        
        1.1.2.1.ConditionClause:
        LOAD REGISTER $a
        JUMP TO 1.1.2.IfStatementDone ON FALSE
        
        1.1.2.1.1.BreakStatement:
        JUMP TO 1.WhileStatementDone
        
        1.1.2.IfStatementDone:
        JUMP TO NEXT INSTRUCTION
        
        1.1.3.EvaluateStatement:
        LOAD REGISTER $c
        SAVE REGISTER $a
        
        1.ConditionRepeat:
        JUMP TO 1.1.ConditionClause
        
        1.WhileStatementDone:
        LOAD REGISTER $result-1
        PULL RESULT
    "($mediaType: "application/basm")
    $addresses: [
        "1.WhileStatement": 1
        "1.1.ConditionClause": 2
        "1.1.1.EvaluateStatement": 4
        "1.1.2.IfStatement": 6
        "1.1.2.1.ConditionClause": 7
        "1.1.2.1.1.BreakStatement": 9
        "1.1.2.IfStatementDone": 10
        "1.1.3.EvaluateStatement": 11
        "1.ConditionRepeat": 13
        "1.WhileStatementDone": 14
    ]
    $bytecode: '00006004180E6002800100006001180A000E000060038001000260055000'(
        $encoding: $base16
        $mediaType: "application/bcod"
    )
    $arguments: [
        $target
    ]
    $variables: [
        $a
        $b
        $c
        $condition
        $result-1
    ]($type: /bali/collections/Set/v1)
    $messages: [ ]($type: /bali/collections/Set/v1)
]
