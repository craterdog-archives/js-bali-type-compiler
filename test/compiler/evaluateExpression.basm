[
    $parameters: []
    $variables: [
        $$index-2
        $$location-1
        $$result
        $a
        $b
        $bar
        $c
        $customer
        $d
        $f
        $foo
        $g
        $h
        $item
        $j
        $k
        $list
        $m
        $p
        $reference
        $target
        $variable
        $w
        $x
        $y
        $z
    ]($type: $Set)
    $procedures: [
        $addItem
        $getSubcomponent
    ]($type: $Set)
    $addresses: [
        "1.EvaluateStatement": 1
        "2.EvaluateStatement": 11
        "3.EvaluateStatement": 13
        "4.EvaluateStatement": 16
        "5.EvaluateStatement": 22
        "6.EvaluateStatement": 26
        "7.EvaluateStatement": 45
        "8.EvaluateStatement": 52
        "9.EvaluateStatement": 55
        "10.EvaluateStatement": 59
        "11.EvaluateStatement": 62
        "12.EvaluateStatement": 65
        "13.EvaluateStatement": 68
        "14.EvaluateStatement": 72
        "15.EvaluateStatement": 76
        "16.EvaluateStatement": 80
        "17.EvaluateStatement": 84
        "18.EvaluateStatement": 88
        "19.EvaluateStatement": 91
        "20.EvaluateStatement": 95
        "21.EvaluateStatement": 99
        "22.EvaluateStatement": 103
        "23.EvaluateStatement": 107
        "24.EvaluateStatement": 111
        "25.EvaluateStatement": 114
        "26.EvaluateStatement": 118
        "27.EvaluateStatement": 122
        "28.EvaluateStatement": 126
        "29.EvaluateStatement": 130
    ]
    $instructions: "
        1.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$foo`
        LOAD VARIABLE $bar
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        PUSH LITERAL `$baz`
        PUSH LITERAL `5`
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        2.EvaluateStatement:
        LOAD VARIABLE $variable
        STORE VARIABLE $$result
        
        3.EvaluateStatement:
        PUSH LITERAL `13`
        INVOKE $isPrime WITH PARAMETER
        STORE VARIABLE $$result
        
        4.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $sum WITH 2 PARAMETERS
        LOAD VARIABLE $c
        INVOKE $product WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        5.EvaluateStatement:
        LOAD VARIABLE $reference
        STORE VARIABLE $$location-1
        LOAD DOCUMENT $$location-1
        STORE VARIABLE $$result
        
        6.EvaluateStatement:
        LOAD VARIABLE $customer
        INVOKE $list
        PUSH LITERAL `$order`
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $parameters WITH PARAMETER
        EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
        INVOKE $list
        PUSH LITERAL `$item`
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $parameters WITH PARAMETER
        EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
        PUSH LITERAL `5`
        STORE VARIABLE $$index-2
        INVOKE $list
        LOAD VARIABLE $$index-2
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $parameters WITH PARAMETER
        EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
        STORE VARIABLE $$result
        
        7.EvaluateStatement:
        LOAD VARIABLE $list
        INVOKE $list
        LOAD VARIABLE $item
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $parameters WITH PARAMETER
        EXECUTE $addItem ON TARGET WITH PARAMETERS
        STORE VARIABLE $$result
        
        8.EvaluateStatement:
        PUSH LITERAL `23`
        INVOKE $factorial WITH PARAMETER
        STORE VARIABLE $$result
        
        9.EvaluateStatement:
        PUSH LITERAL `2`
        PUSH LITERAL `8`
        INVOKE $exponential WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        10.EvaluateStatement:
        PUSH LITERAL `pi`
        INVOKE $inverse WITH PARAMETER
        STORE VARIABLE $$result
        
        11.EvaluateStatement:
        PUSH LITERAL `5`
        INVOKE $reciprocal WITH PARAMETER
        STORE VARIABLE $$result
        
        12.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        INVOKE $conjugate WITH PARAMETER
        STORE VARIABLE $$result
        
        13.EvaluateStatement:
        LOAD VARIABLE $x
        LOAD VARIABLE $y
        INVOKE $product WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        14.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $quotient WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        15.EvaluateStatement:
        LOAD VARIABLE $c
        LOAD VARIABLE $d
        INVOKE $remainder WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        16.EvaluateStatement:
        LOAD VARIABLE $x
        LOAD VARIABLE $y
        INVOKE $sum WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        17.EvaluateStatement:
        LOAD VARIABLE $w
        LOAD VARIABLE $z
        INVOKE $difference WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        18.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        INVOKE $magnitude WITH PARAMETER
        STORE VARIABLE $$result
        
        19.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $isLessThan WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        20.EvaluateStatement:
        LOAD VARIABLE $c
        LOAD VARIABLE $d
        INVOKE $isEqualTo WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        21.EvaluateStatement:
        LOAD VARIABLE $f
        LOAD VARIABLE $g
        INVOKE $isMoreThan WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        22.EvaluateStatement:
        LOAD VARIABLE $h
        LOAD VARIABLE $j
        INVOKE $isSameAs WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        23.EvaluateStatement:
        LOAD VARIABLE $k
        LOAD VARIABLE $m
        INVOKE $isMatchedBy WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        24.EvaluateStatement:
        LOAD VARIABLE $p
        INVOKE $complement WITH PARAMETER
        STORE VARIABLE $$result
        
        25.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $and WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        26.EvaluateStatement:
        LOAD VARIABLE $c
        LOAD VARIABLE $d
        INVOKE $sans WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        27.EvaluateStatement:
        LOAD VARIABLE $f
        LOAD VARIABLE $g
        INVOKE $xor WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        28.EvaluateStatement:
        LOAD VARIABLE $h
        LOAD VARIABLE $j
        INVOKE $or WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        29.EvaluateStatement:
        LOAD VARIABLE $foo
        PUSH LITERAL `5`
        INVOKE $default WITH 2 PARAMETERS
        STORE VARIABLE $$result
        LOAD VARIABLE $$result
        HANDLE RESULT
    "(
        $mediatype: "application/basm"
    )
    $bytecode: '
        A00F28016006B009B00228022803B009B0028003601680032804FFFF8003
        60046005B0806007B05B800360148002780280036008A04C2805B002A854
        D802A04C2806B002A854D80228038001A04C6001B002A854D80280036011
        A04C600EB002A854D80180032807A81E800328082809B01C8003280AA83F
        80032803A8648003280BA812800360186019B05B800360046005B05D8003
        60076009B067800360186019B08080036017601AB0198003280BFFFF8003
        60046005B044800360076009B0418003600A600CB0468003600D600FB048
        800360106012B04580036013A810800360046005B004800360076009B072
        8003600A600CB0898003600D600FB0538003600B2803B01780036003E000
    '(
        $encoding: $base16
        $mediatype: "application/bcod"
    )
]
