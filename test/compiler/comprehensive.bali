[
    $procedure: {
        if a < b then {
            $a := b
            $b := {
                $foo := bar
                $bar := baz
            }
            throw exception
        } else if a > 0 then {
            false
            $c := factorial(b)
            return c
        } else {
            $d := b.find(tag)
            (3, 4i)
            return
        } handle $exception matching [
            $type: $warning
        ] with {
            $count := count + 1
            [
                $message: "Something not too serious happened."
                $exception: $oops
            ]
        } matching [
            $type: $moderate
        ] with {
            $exception := [
                $message: "Something serious happened."
                $exception: $bigOops
            ]
            throw exception
        }
        while true do {
            $foo := bar
            if foo then {
                break loop
            } else {
                with each $item in sequence do {
                    select selection from $first do {
                        true
                    } $second do {
                        false
                    } else {
                        continue loop
                    }
                }
            }
        }
    }($string: /bali/elements/Text/v1)
    $instructions: "
        1.IfStatement:
        PUSH HANDLER 1.IfStatementHandler
        
        1.1.ConditionClause:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        CALL $isLess WITH 2 ARGUMENTS
        JUMP TO 1.2.ConditionClause ON FALSE
        
        1.1.1.EvaluateStatement:
        LOAD VARIABLE $b
        SAVE VARIABLE $a
        
        1.1.2.EvaluateStatement:
        PUSH LITERAL `{
            $foo := bar
            $bar := baz
        }`
        SAVE VARIABLE $b
        
        1.1.3.ThrowStatement:
        LOAD VARIABLE $exception
        PULL EXCEPTION
        
        1.1.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.2.ConditionClause:
        LOAD VARIABLE $a
        PUSH LITERAL `0`
        CALL $isMore WITH 2 ARGUMENTS
        JUMP TO 1.3.ElseClause ON FALSE
        
        1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        SAVE VARIABLE $result-1
        
        1.2.2.EvaluateStatement:
        LOAD VARIABLE $b
        CALL $factorial WITH 1 ARGUMENT
        SAVE VARIABLE $c
        
        1.2.3.ReturnStatement:
        LOAD VARIABLE $c
        PULL RESULT
        
        1.2.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.3.ElseClause:
        SKIP INSTRUCTION
        
        1.3.1.EvaluateStatement:
        LOAD VARIABLE $b
        CALL $list
        LOAD VARIABLE $tag
        CALL $addItem WITH 2 ARGUMENTS
        SEND $find TO COMPONENT WITH ARGUMENTS
        SAVE VARIABLE $d
        
        1.3.2.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        SAVE VARIABLE $result-1
        
        1.3.3.ReturnStatement:
        PUSH LITERAL `none`
        PULL RESULT
        
        1.3.ElseClauseDone:
        SKIP INSTRUCTION
        
        1.IfStatementDone:
        PULL HANDLER
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementHandler:
        SAVE VARIABLE $exception
        
        1.4.HandleBlock:
        LOAD VARIABLE $exception
        CALL $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$warning`
        CALL $association WITH 2 ARGUMENTS
        CALL $addItem WITH 2 ARGUMENTS
        CALL $doesMatch WITH 2 ARGUMENTS
        JUMP TO 1.5.HandleBlock ON FALSE
        
        1.4.1.EvaluateStatement:
        LOAD VARIABLE $count
        PUSH LITERAL `1`
        CALL $sum WITH 2 ARGUMENTS
        SAVE VARIABLE $count
        
        1.4.2.EvaluateStatement:
        CALL $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something not too serious happened."`
        CALL $association WITH 2 ARGUMENTS
        CALL $addItem WITH 2 ARGUMENTS
        PUSH LITERAL `$exception`
        PUSH LITERAL `$oops`
        CALL $association WITH 2 ARGUMENTS
        CALL $addItem WITH 2 ARGUMENTS
        SAVE VARIABLE $result-1
        
        1.4.HandleBlockDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.5.HandleBlock:
        LOAD VARIABLE $exception
        CALL $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$moderate`
        CALL $association WITH 2 ARGUMENTS
        CALL $addItem WITH 2 ARGUMENTS
        CALL $doesMatch WITH 2 ARGUMENTS
        JUMP TO 1.IfStatementFailed ON FALSE
        
        1.5.1.EvaluateStatement:
        CALL $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something serious happened."`
        CALL $association WITH 2 ARGUMENTS
        CALL $addItem WITH 2 ARGUMENTS
        PUSH LITERAL `$exception`
        PUSH LITERAL `$bigOops`
        CALL $association WITH 2 ARGUMENTS
        CALL $addItem WITH 2 ARGUMENTS
        SAVE VARIABLE $exception
        
        1.5.2.ThrowStatement:
        LOAD VARIABLE $exception
        PULL EXCEPTION
        
        1.5.HandleBlockDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementFailed:
        LOAD VARIABLE $exception
        PULL EXCEPTION
        
        1.IfStatementSucceeded:
        SKIP INSTRUCTION
        
        2.WhileStatement:
        SKIP INSTRUCTION
        
        2.1.ConditionClause:
        PUSH LITERAL `true`
        JUMP TO 2.WhileStatementDone ON FALSE
        
        2.1.1.EvaluateStatement:
        LOAD VARIABLE $bar
        SAVE VARIABLE $foo
        
        2.1.2.IfStatement:
        SKIP INSTRUCTION
        
        2.1.2.1.ConditionClause:
        LOAD VARIABLE $foo
        JUMP TO 2.1.2.2.ElseClause ON FALSE
        
        2.1.2.1.1.BreakStatement:
        JUMP TO 2.WhileStatementDone
        
        2.1.2.1.ConditionClauseDone:
        JUMP TO 2.1.2.IfStatementDone
        
        2.1.2.2.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.WithStatement:
        LOAD VARIABLE $sequence
        SEND $iterator TO COMPONENT
        SAVE VARIABLE $iterator-2
        
        2.1.2.2.1.1.ConditionClause:
        LOAD VARIABLE $iterator-2
        SEND $hasNext TO COMPONENT
        JUMP TO 2.1.2.2.1.WithStatementDone ON FALSE
        LOAD VARIABLE $iterator-2
        SEND $next TO COMPONENT
        SAVE VARIABLE $item
        
        2.1.2.2.1.1.1.SelectStatement:
        LOAD VARIABLE $selection
        SAVE VARIABLE $selector-3
        
        2.1.2.2.1.1.1.1.OptionClause:
        LOAD VARIABLE $selector-3
        PUSH LITERAL `$first`
        CALL $doesMatch WITH 2 ARGUMENTS
        JUMP TO 2.1.2.2.1.1.1.2.OptionClause ON FALSE
        
        2.1.2.2.1.1.1.1.1.EvaluateStatement:
        PUSH LITERAL `true`
        SAVE VARIABLE $result-1
        
        2.1.2.2.1.1.1.1.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.2.OptionClause:
        LOAD VARIABLE $selector-3
        PUSH LITERAL `$second`
        CALL $doesMatch WITH 2 ARGUMENTS
        JUMP TO 2.1.2.2.1.1.1.3.ElseClause ON FALSE
        
        2.1.2.2.1.1.1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        SAVE VARIABLE $result-1
        
        2.1.2.2.1.1.1.2.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.3.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.1.1.3.1.ContinueStatement:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.1.1.3.ElseClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.SelectStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.1.ConditionRepeat:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.WithStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.ElseClauseDone:
        SKIP INSTRUCTION
        
        2.1.2.IfStatementDone:
        SKIP INSTRUCTION
        
        2.ConditionRepeat:
        JUMP TO 2.1.ConditionClause
        
        2.WhileStatementDone:
        LOAD VARIABLE $result-1
        PULL RESULT
    "($mediaType: "application/basm")
    $addresses: [
        "1.IfStatement": 1
        "1.1.ConditionClause": 2
        "1.1.1.EvaluateStatement": 6
        "1.1.2.EvaluateStatement": 8
        "1.1.3.ThrowStatement": 10
        "1.1.ConditionClauseDone": 12
        "1.2.ConditionClause": 13
        "1.2.1.EvaluateStatement": 17
        "1.2.2.EvaluateStatement": 19
        "1.2.3.ReturnStatement": 22
        "1.2.ConditionClauseDone": 24
        "1.3.ElseClause": 25
        "1.3.1.EvaluateStatement": 26
        "1.3.2.EvaluateStatement": 32
        "1.3.3.ReturnStatement": 34
        "1.3.ElseClauseDone": 36
        "1.IfStatementDone": 37
        "1.IfStatementHandler": 39
        "1.4.HandleBlock": 40
        "1.4.1.EvaluateStatement": 48
        "1.4.2.EvaluateStatement": 52
        "1.4.HandleBlockDone": 62
        "1.5.HandleBlock": 63
        "1.5.1.EvaluateStatement": 71
        "1.5.2.ThrowStatement": 81
        "1.5.HandleBlockDone": 83
        "1.IfStatementFailed": 84
        "1.IfStatementSucceeded": 86
        "2.WhileStatement": 87
        "2.1.ConditionClause": 88
        "2.1.1.EvaluateStatement": 90
        "2.1.2.IfStatement": 92
        "2.1.2.1.ConditionClause": 93
        "2.1.2.1.1.BreakStatement": 95
        "2.1.2.1.ConditionClauseDone": 96
        "2.1.2.2.ElseClause": 97
        "2.1.2.2.1.WithStatement": 98
        "2.1.2.2.1.1.ConditionClause": 101
        "2.1.2.2.1.1.1.SelectStatement": 107
        "2.1.2.2.1.1.1.1.OptionClause": 109
        "2.1.2.2.1.1.1.1.1.EvaluateStatement": 113
        "2.1.2.2.1.1.1.1.OptionClauseDone": 115
        "2.1.2.2.1.1.1.2.OptionClause": 116
        "2.1.2.2.1.1.1.2.1.EvaluateStatement": 120
        "2.1.2.2.1.1.1.2.OptionClauseDone": 122
        "2.1.2.2.1.1.1.3.ElseClause": 123
        "2.1.2.2.1.1.1.3.1.ContinueStatement": 124
        "2.1.2.2.1.1.1.3.ElseClauseDone": 125
        "2.1.2.2.1.1.1.SelectStatementDone": 126
        "2.1.2.2.1.ConditionRepeat": 127
        "2.1.2.2.1.WithStatementDone": 128
        "2.1.2.2.ElseClauseDone": 129
        "2.1.2.IfStatementDone": 130
        "2.ConditionRepeat": 131
        "2.WhileStatementDone": 132
    ]
    $bytecode: '
        202760016002D042180D600280012801800260075800002560012802D043
        18192802800B6002C82E800460045000002500006002C051600FD001E801
        80062804800B2805500000004000005680076007C01428062807D00BD001
        D028183F60052808D08C8005C0142809280AD00BD001280B280CD00BD001
        800B00566007C0142806280ED00BD001D0281854C01428092810D00BD001
        280B2812D00BD00180076007580000566007580000000000280818846003
        8008000060081861008400820000600EE003800A600AE0021880600AE004
        8009600C800D600D2814D02818742808800B007E600D2816D028187B2802
        800B007E00000065007E000000650000000000000058600B5000
    '(
        $encoding: $base16
        $mediaType: "application/bcod"
    )
    $arguments: [
        $target
    ]
    $variables: [
        $a
        $b
        $bar
        $c
        $count
        $d
        $exception
        $foo
        $item
        $iterator-2
        $result-1
        $selection
        $selector-3
        $sequence
        $tag
    ]($type: /bali/collections/Set/v1)
    $messages: [
        $find
        $hasNext
        $iterator
        $next
    ]($type: /bali/collections/Set/v1)
]
