[
    $procedure: {
        if a < b then {
            $a := b
            $b := {
                $foo := bar
                $bar := baz
            }
            throw exception
        } else if a > 0 then {
            false
            $c := factorial(b)
            return c
        } else {
            $d := b.find(tag)
            (3, 4i)
            return
        } handle $exception matching [
            $type: $warning
        ] with {
            $count := count + 1
            [
                $message: "Something not too serious happened."
                $exception: $oops
            ]
        } matching [
            $type: $moderate
        ] with {
            $exception := [
                $message: "Something serious happened."
                $exception: $bigOops
            ]
            throw exception
        }
        while true do {
            $foo := bar
            if foo then {
                break loop
            } else {
                with each $item in sequence do {
                    select selection from $first do {
                        true
                    } $second do {
                        false
                    } else {
                        continue loop
                    }
                }
            }
        }
    }($string: /bali/elements/Text/v1)
    $instructions: "
        1.IfStatement:
        PUSH HANDLER 1.IfStatementHandlers
        
        1.1.ConditionClause:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $isLess WITH 2 ARGUMENTS
        JUMP TO 1.2.ConditionClause ON FALSE
        
        1.1.1.EvaluateStatement:
        LOAD VARIABLE $b
        STORE VARIABLE $a
        
        1.1.2.EvaluateStatement:
        PUSH LITERAL `{
            $foo := bar
            $bar := baz
        }`
        STORE VARIABLE $b
        
        1.1.3.ThrowStatement:
        LOAD VARIABLE $exception
        HANDLE EXCEPTION
        
        1.1.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.2.ConditionClause:
        LOAD VARIABLE $a
        PUSH LITERAL `0`
        INVOKE $isMore WITH 2 ARGUMENTS
        JUMP TO 1.3.ElseClause ON FALSE
        
        1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        STORE VARIABLE $result-1
        
        1.2.2.EvaluateStatement:
        LOAD VARIABLE $b
        INVOKE $factorial WITH 1 ARGUMENT
        STORE VARIABLE $c
        
        1.2.3.ReturnStatement:
        LOAD VARIABLE $c
        HANDLE RESULT
        
        1.2.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.3.ElseClause:
        SKIP INSTRUCTION
        
        1.3.1.EvaluateStatement:
        LOAD VARIABLE $b
        INVOKE $list
        LOAD VARIABLE $tag
        INVOKE $addItem WITH 2 ARGUMENTS
        SEND $find TO COMPONENT WITH ARGUMENTS
        STORE VARIABLE $d
        
        1.3.2.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        STORE VARIABLE $result-1
        
        1.3.3.ReturnStatement:
        PUSH LITERAL `none`
        HANDLE RESULT
        
        1.3.ElseClauseDone:
        SKIP INSTRUCTION
        
        1.IfStatementDone:
        POP HANDLER
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementHandlers:
        SKIP INSTRUCTION
        
        1.4.HandleClause:
        STORE VARIABLE $exception
        LOAD VARIABLE $exception
        LOAD VARIABLE $exception
        INVOKE $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$warning`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        INVOKE $doesMatch WITH 2 ARGUMENTS
        JUMP TO 1.IfStatementFailed ON FALSE
        POP COMPONENT
        
        1.4.1.EvaluateStatement:
        LOAD VARIABLE $count
        PUSH LITERAL `1`
        INVOKE $sum WITH 2 ARGUMENTS
        STORE VARIABLE $count
        
        1.4.2.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something not too serious happened."`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        PUSH LITERAL `$exception`
        PUSH LITERAL `$oops`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        STORE VARIABLE $result-1
        
        1.4.HandleClauseDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementFailed:
        HANDLE EXCEPTION
        
        1.IfStatementSucceeded:
        SKIP INSTRUCTION
        
        2.WhileStatement:
        SKIP INSTRUCTION
        
        2.1.ConditionClause:
        PUSH LITERAL `true`
        JUMP TO 2.WhileStatementDone ON FALSE
        
        2.1.1.EvaluateStatement:
        LOAD VARIABLE $bar
        STORE VARIABLE $foo
        
        2.1.2.IfStatement:
        SKIP INSTRUCTION
        
        2.1.2.1.ConditionClause:
        LOAD VARIABLE $foo
        JUMP TO 2.1.2.2.ElseClause ON FALSE
        
        2.1.2.1.1.BreakStatement:
        JUMP TO 2.WhileStatementDone
        
        2.1.2.1.ConditionClauseDone:
        JUMP TO 2.1.2.IfStatementDone
        
        2.1.2.2.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.WithStatement:
        LOAD VARIABLE $sequence
        SEND $iterator TO COMPONENT
        STORE VARIABLE $iterator-2
        
        2.1.2.2.1.1.ConditionClause:
        LOAD VARIABLE $iterator-2
        SEND $hasNext TO COMPONENT
        JUMP TO 2.1.2.2.1.WithStatementDone ON FALSE
        LOAD VARIABLE $iterator-2
        SEND $next TO COMPONENT
        STORE VARIABLE $item
        
        2.1.2.2.1.1.1.SelectStatement:
        LOAD VARIABLE $selection
        STORE VARIABLE $selector-3
        
        2.1.2.2.1.1.1.1.OptionClause:
        LOAD VARIABLE $selector-3
        PUSH LITERAL `$first`
        INVOKE $doesMatch WITH 2 ARGUMENTS
        JUMP TO 2.1.2.2.1.1.1.2.OptionClause ON FALSE
        
        2.1.2.2.1.1.1.1.1.EvaluateStatement:
        PUSH LITERAL `true`
        STORE VARIABLE $result-1
        
        2.1.2.2.1.1.1.1.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.2.OptionClause:
        LOAD VARIABLE $selector-3
        PUSH LITERAL `$second`
        INVOKE $doesMatch WITH 2 ARGUMENTS
        JUMP TO 2.1.2.2.1.1.1.3.ElseClause ON FALSE
        
        2.1.2.2.1.1.1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        STORE VARIABLE $result-1
        
        2.1.2.2.1.1.1.2.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.3.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.1.1.3.1.ContinueStatement:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.1.1.3.ElseClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.SelectStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.1.ConditionRepeat:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.WithStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.ElseClauseDone:
        SKIP INSTRUCTION
        
        2.1.2.IfStatementDone:
        SKIP INSTRUCTION
        
        2.ConditionRepeat:
        JUMP TO 2.1.ConditionClause
        
        2.WhileStatementDone:
        LOAD VARIABLE $result-1
        HANDLE RESULT
    "($mediaType: "application/basm")
    $addresses: [
        "1.IfStatement": 1
        "1.1.ConditionClause": 2
        "1.1.1.EvaluateStatement": 6
        "1.1.2.EvaluateStatement": 8
        "1.1.3.ThrowStatement": 10
        "1.1.ConditionClauseDone": 12
        "1.2.ConditionClause": 13
        "1.2.1.EvaluateStatement": 17
        "1.2.2.EvaluateStatement": 19
        "1.2.3.ReturnStatement": 22
        "1.2.ConditionClauseDone": 24
        "1.3.ElseClause": 25
        "1.3.1.EvaluateStatement": 26
        "1.3.2.EvaluateStatement": 32
        "1.3.3.ReturnStatement": 34
        "1.3.ElseClauseDone": 36
        "1.IfStatementDone": 37
        "1.IfStatementHandlers": 39
        "1.4.HandleClause": 40
        "1.4.1.EvaluateStatement": 51
        "1.4.2.EvaluateStatement": 55
        "1.4.HandleClauseDone": 65
        "1.IfStatementFailed": 66
        "1.IfStatementSucceeded": 67
        "2.WhileStatement": 68
        "2.1.ConditionClause": 69
        "2.1.1.EvaluateStatement": 71
        "2.1.2.IfStatement": 73
        "2.1.2.1.ConditionClause": 74
        "2.1.2.1.1.BreakStatement": 76
        "2.1.2.1.ConditionClauseDone": 77
        "2.1.2.2.ElseClause": 78
        "2.1.2.2.1.WithStatement": 79
        "2.1.2.2.1.1.ConditionClause": 82
        "2.1.2.2.1.1.1.SelectStatement": 88
        "2.1.2.2.1.1.1.1.OptionClause": 90
        "2.1.2.2.1.1.1.1.1.EvaluateStatement": 94
        "2.1.2.2.1.1.1.1.OptionClauseDone": 96
        "2.1.2.2.1.1.1.2.OptionClause": 97
        "2.1.2.2.1.1.1.2.1.EvaluateStatement": 101
        "2.1.2.2.1.1.1.2.OptionClauseDone": 103
        "2.1.2.2.1.1.1.3.ElseClause": 104
        "2.1.2.2.1.1.1.3.1.ContinueStatement": 105
        "2.1.2.2.1.1.1.3.ElseClauseDone": 106
        "2.1.2.2.1.1.1.SelectStatementDone": 107
        "2.1.2.2.1.ConditionRepeat": 108
        "2.1.2.2.1.WithStatementDone": 109
        "2.1.2.2.ElseClauseDone": 110
        "2.1.2.IfStatementDone": 111
        "2.ConditionRepeat": 112
        "2.WhileStatementDone": 113
    ]
    $bytecode: '
        202760016002B040180D60028001280180026007E800002560012802B041
        18192803800B6002A82D80046004E000002500006002A04F600FB001C801
        80062804800B2805E0000000400000430000800760076007A01428062807
        B00BB001B0271842480060052808B0898005A0142809280AB00BB001280B
        280CB00BB001800B0043E80000000000280D18716003800800006008184E
        0071006F0000600EC003800A600AC002186D600AC0048009600C800D600D
        280EB0271861280D800B006B600D2810B02718682803800B006B00000052
        006B000000520000000000000045600BE000
    '(
        $encoding: $base16
        $mediaType: "application/bcod"
    )
    $arguments: [
        $target
    ]
    $variables: [
        $a
        $b
        $bar
        $c
        $count
        $d
        $exception
        $foo
        $item
        $iterator-2
        $result-1
        $selection
        $selector-3
        $sequence
        $tag
    ]($type: /bali/collections/Set/v1)
    $messages: [
        $find
        $hasNext
        $iterator
        $next
    ]($type: /bali/collections/Set/v1)
]
