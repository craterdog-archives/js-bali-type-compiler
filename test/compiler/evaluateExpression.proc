[
    $parameters: []
    $variables: [
        $a
        $b
        $c
        $customer
        $d
        $f
        $foo
        $g
        $h
        $$index-2
        $item
        $j
        $k
        $list
        $$location-1
        $m
        $p
        $reference
        $$result
        $target
        $variable
        $w
        $x
        $y
        $z
    ]($type: /bali/collections/Set/v1)
    $procedures: [
        $addItem
        $getMagnitude
        $getSubcomponent
    ]($type: /bali/collections/Set/v1)
    $addresses: [
        "1.EvaluateStatement": 1
        "2.EvaluateStatement": 11
        "3.EvaluateStatement": 13
        "4.EvaluateStatement": 16
        "5.EvaluateStatement": 22
        "6.EvaluateStatement": 26
        "7.EvaluateStatement": 42
        "8.EvaluateStatement": 48
        "9.EvaluateStatement": 51
        "10.EvaluateStatement": 55
        "11.EvaluateStatement": 58
        "12.EvaluateStatement": 61
        "13.EvaluateStatement": 65
        "14.EvaluateStatement": 69
        "15.EvaluateStatement": 73
        "16.EvaluateStatement": 77
        "17.EvaluateStatement": 81
        "18.EvaluateStatement": 84
        "19.EvaluateStatement": 88
        "20.EvaluateStatement": 92
        "21.EvaluateStatement": 96
        "22.EvaluateStatement": 100
        "23.EvaluateStatement": 104
        "24.EvaluateStatement": 107
        "25.EvaluateStatement": 111
        "26.EvaluateStatement": 115
        "27.EvaluateStatement": 119
        "28.EvaluateStatement": 123
    ]
    $instructions: "
        1.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$foo`
        PUSH LITERAL `$bar`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        PUSH LITERAL `$baz`
        PUSH LITERAL `5`
        INVOKE $association WITH 2 ARGUMENTS
        INVOKE $addItem WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        2.EvaluateStatement:
        LOAD VARIABLE $variable
        STORE VARIABLE $$result
        
        3.EvaluateStatement:
        PUSH LITERAL `13`
        INVOKE $isPrime WITH ARGUMENT
        STORE VARIABLE $$result
        
        4.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $sum WITH 2 ARGUMENTS
        LOAD VARIABLE $c
        INVOKE $product WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        5.EvaluateStatement:
        LOAD VARIABLE $reference
        STORE VARIABLE $$location-1
        LOAD DOCUMENT $$location-1
        STORE VARIABLE $$result
        
        6.EvaluateStatement:
        LOAD VARIABLE $customer
        INVOKE $list
        PUSH LITERAL `$order`
        INVOKE $addItem WITH 2 ARGUMENTS
        EXECUTE $getSubcomponent ON TARGET WITH ARGUMENTS
        INVOKE $list
        PUSH LITERAL `$item`
        INVOKE $addItem WITH 2 ARGUMENTS
        EXECUTE $getSubcomponent ON TARGET WITH ARGUMENTS
        PUSH LITERAL `5`
        STORE VARIABLE $$index-2
        INVOKE $list
        LOAD VARIABLE $$index-2
        INVOKE $addItem WITH 2 ARGUMENTS
        EXECUTE $getSubcomponent ON TARGET WITH ARGUMENTS
        STORE VARIABLE $$result
        
        7.EvaluateStatement:
        LOAD VARIABLE $list
        INVOKE $list
        LOAD VARIABLE $item
        INVOKE $addItem WITH 2 ARGUMENTS
        EXECUTE $addItem ON TARGET WITH ARGUMENTS
        STORE VARIABLE $$result
        
        8.EvaluateStatement:
        PUSH LITERAL `23`
        INVOKE $factorial WITH ARGUMENT
        STORE VARIABLE $$result
        
        9.EvaluateStatement:
        PUSH LITERAL `2`
        PUSH LITERAL `8`
        INVOKE $exponential WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        10.EvaluateStatement:
        PUSH LITERAL `Ï€`
        INVOKE $inverse WITH ARGUMENT
        STORE VARIABLE $$result
        
        11.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        INVOKE $conjugate WITH ARGUMENT
        STORE VARIABLE $$result
        
        12.EvaluateStatement:
        LOAD VARIABLE $x
        LOAD VARIABLE $y
        INVOKE $product WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        13.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $quotient WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        14.EvaluateStatement:
        LOAD VARIABLE $c
        LOAD VARIABLE $d
        INVOKE $remainder WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        15.EvaluateStatement:
        LOAD VARIABLE $x
        LOAD VARIABLE $y
        INVOKE $sum WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        16.EvaluateStatement:
        LOAD VARIABLE $w
        LOAD VARIABLE $z
        INVOKE $difference WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        17.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        EXECUTE $getMagnitude ON TARGET
        STORE VARIABLE $$result
        
        18.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $isLessThan WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        19.EvaluateStatement:
        LOAD VARIABLE $c
        LOAD VARIABLE $d
        INVOKE $isEqualTo WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        20.EvaluateStatement:
        LOAD VARIABLE $f
        LOAD VARIABLE $g
        INVOKE $isMoreThan WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        21.EvaluateStatement:
        LOAD VARIABLE $h
        LOAD VARIABLE $j
        INVOKE $isSameAs WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        22.EvaluateStatement:
        LOAD VARIABLE $k
        LOAD VARIABLE $m
        INVOKE $isMatchedBy WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        23.EvaluateStatement:
        LOAD VARIABLE $p
        INVOKE $complement WITH ARGUMENT
        STORE VARIABLE $$result
        
        24.EvaluateStatement:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $and WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        25.EvaluateStatement:
        LOAD VARIABLE $c
        LOAD VARIABLE $d
        INVOKE $sans WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        26.EvaluateStatement:
        LOAD VARIABLE $f
        LOAD VARIABLE $g
        INVOKE $xor WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        27.EvaluateStatement:
        LOAD VARIABLE $h
        LOAD VARIABLE $j
        INVOKE $or WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        
        28.EvaluateStatement:
        LOAD VARIABLE $foo
        PUSH LITERAL `5`
        INVOKE $default WITH 2 ARGUMENTS
        STORE VARIABLE $$result
        LOAD VARIABLE $$result
        HANDLE RESULT
    "($mediatype: "application/basm")
    $bytecode: '
        A00E28012802B008B00128032804B008B0018013601580132805FFFF8013
        60016002B07B6003B05780136012800F780F80136004A0492806B001D803
        A0492807B001D8032804800AA049600AB001D8038013600EA049600BB001
        D80180132808A81D80132809280AB01B8013280BA83C8013280CA8118013
        60176018B057801360016002B059801360036005B063801360176018B07B
        801360166019B0188013280CD002801360016002B041801360036005B03E
        801360066008B04380136009600CB0458013600D6010B04280136011A80F
        801360016002B003801360036005B06E801360066008B08480136009600C
        B04F801360072804B01680136013E000
    '(
        $encoding: $base16
        $mediatype: "application/bcod"
    )
]
