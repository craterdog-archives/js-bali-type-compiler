[
    $parameters: [$foo]
    $variables: [
        $$iterator-1
        $$result
        $$selector-2
        $a
        $b
        $bar
        $c
        $count
        $d
        $exception
        $foo
        $item
        $selection
        $sequence
        $tag
        $target
    ](
        $type: /bali/collections/Set/v1
    )
    $procedures: [
        $find
        $getIterator
        $getNext
        $hasNext
    ](
        $type: /bali/collections/Set/v1
    )
    $addresses: [
        "1.IfStatement": 1
        "1.1.ConditionClause": 2
        "1.1.1.EvaluateStatement": 6
        "1.1.2.EvaluateStatement": 8
        "1.1.3.ThrowStatement": 10
        "1.1.ConditionClauseDone": 12
        "1.2.ConditionClause": 13
        "1.2.1.EvaluateStatement": 17
        "1.2.2.EvaluateStatement": 19
        "1.2.3.ReturnStatement": 22
        "1.2.ConditionClauseDone": 24
        "1.3.ElseClause": 25
        "1.3.1.EvaluateStatement": 26
        "1.3.2.EvaluateStatement": 35
        "1.3.3.ReturnStatement": 37
        "1.3.ElseClauseDone": 39
        "1.IfStatementDone": 40
        "1.IfStatementHandlers": 42
        "1.4.HandleClause": 43
        "1.4.1.EvaluateStatement": 54
        "1.4.2.EvaluateStatement": 58
        "1.4.HandleClauseDone": 68
        "1.5.HandleClause": 69
        "1.5.1.EvaluateStatement": 80
        "1.5.2.ThrowStatement": 90
        "1.5.HandleClauseDone": 92
        "1.IfStatementFailed": 93
        "1.IfStatementSucceeded": 94
        "2.WhileStatement": 95
        "2.1.ConditionClause": 96
        "2.1.1.EvaluateStatement": 98
        "2.1.2.IfStatement": 100
        "2.1.2.1.ConditionClause": 101
        "2.1.2.1.1.BreakStatement": 103
        "2.1.2.1.ConditionClauseDone": 104
        "2.1.2.2.ElseClause": 105
        "2.1.2.2.1.WithStatement": 106
        "2.1.2.2.1.1.ConditionClause": 109
        "2.1.2.2.1.1.1.SelectStatement": 115
        "2.1.2.2.1.1.1.1.OptionClause": 117
        "2.1.2.2.1.1.1.1.1.EvaluateStatement": 121
        "2.1.2.2.1.1.1.1.OptionClauseDone": 123
        "2.1.2.2.1.1.1.2.OptionClause": 124
        "2.1.2.2.1.1.1.2.1.EvaluateStatement": 128
        "2.1.2.2.1.1.1.2.OptionClauseDone": 130
        "2.1.2.2.1.1.1.3.ElseClause": 131
        "2.1.2.2.1.1.1.3.1.ContinueStatement": 132
        "2.1.2.2.1.1.1.3.ElseClauseDone": 133
        "2.1.2.2.1.1.1.SelectStatementDone": 134
        "2.1.2.2.1.ConditionRepeat": 135
        "2.1.2.2.1.WithStatementDone": 136
        "2.1.2.2.ElseClauseDone": 137
        "2.1.2.IfStatementDone": 138
        "2.ConditionRepeat": 139
        "2.WhileStatementDone": 140
    ]
    $instructions: "
        1.IfStatement:
        PUSH HANDLER 1.IfStatementHandlers
        
        1.1.ConditionClause:
        LOAD VARIABLE $a
        LOAD VARIABLE $b
        INVOKE $isLessThan WITH 2 PARAMETERS
        JUMP TO 1.2.ConditionClause ON FALSE
        
        1.1.1.EvaluateStatement:
        LOAD VARIABLE $b
        STORE VARIABLE $a
        
        1.1.2.EvaluateStatement:
        PUSH LITERAL `{$foo := bar; $bar := baz}`
        STORE VARIABLE $b
        
        1.1.3.ThrowStatement:
        LOAD VARIABLE $exception
        HANDLE EXCEPTION
        
        1.1.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.2.ConditionClause:
        LOAD VARIABLE $a
        PUSH LITERAL `0`
        INVOKE $isMoreThan WITH 2 PARAMETERS
        JUMP TO 1.3.ElseClause ON FALSE
        
        1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        STORE VARIABLE $$result
        
        1.2.2.EvaluateStatement:
        LOAD VARIABLE $b
        INVOKE $factorial WITH PARAMETER
        STORE VARIABLE $c
        
        1.2.3.ReturnStatement:
        LOAD VARIABLE $c
        HANDLE RESULT
        
        1.2.ConditionClauseDone:
        JUMP TO 1.IfStatementDone
        
        1.3.ElseClause:
        SKIP INSTRUCTION
        
        1.3.1.EvaluateStatement:
        LOAD VARIABLE $b
        INVOKE $catalog
        PUSH LITERAL `$tag`
        LOAD VARIABLE $tag
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $parameters WITH PARAMETER
        EXECUTE $find ON TARGET WITH PARAMETERS
        STORE VARIABLE $d
        
        1.3.2.EvaluateStatement:
        PUSH LITERAL `(3, 4i)`
        STORE VARIABLE $$result
        
        1.3.3.ReturnStatement:
        PUSH LITERAL `none`
        HANDLE RESULT
        
        1.3.ElseClauseDone:
        SKIP INSTRUCTION
        
        1.IfStatementDone:
        POP HANDLER
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementHandlers:
        SKIP INSTRUCTION
        
        1.4.HandleClause:
        STORE VARIABLE $exception
        LOAD VARIABLE $exception
        LOAD VARIABLE $exception
        INVOKE $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$warning`
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $isMatchedBy WITH 2 PARAMETERS
        JUMP TO 1.5.HandleClause ON FALSE
        POP COMPONENT
        
        1.4.1.EvaluateStatement:
        LOAD VARIABLE $count
        PUSH LITERAL `1`
        INVOKE $sum WITH 2 PARAMETERS
        STORE VARIABLE $count
        
        1.4.2.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something not too serious happened."`
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        PUSH LITERAL `$exception`
        LOAD VARIABLE $exception
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        STORE VARIABLE $$result
        
        1.4.HandleClauseDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.5.HandleClause:
        STORE VARIABLE $exception
        LOAD VARIABLE $exception
        LOAD VARIABLE $exception
        INVOKE $catalog
        PUSH LITERAL `$type`
        PUSH LITERAL `$moderate`
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        INVOKE $isMatchedBy WITH 2 PARAMETERS
        JUMP TO 1.IfStatementFailed ON FALSE
        POP COMPONENT
        
        1.5.1.EvaluateStatement:
        INVOKE $catalog
        PUSH LITERAL `$message`
        PUSH LITERAL `"Something serious happened."`
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        PUSH LITERAL `$exception`
        LOAD VARIABLE $exception
        INVOKE $association WITH 2 PARAMETERS
        INVOKE $addItem WITH 2 PARAMETERS
        STORE VARIABLE $exception
        
        1.5.2.ThrowStatement:
        LOAD VARIABLE $exception
        HANDLE EXCEPTION
        
        1.5.HandleClauseDone:
        JUMP TO 1.IfStatementSucceeded
        
        1.IfStatementFailed:
        HANDLE EXCEPTION
        
        1.IfStatementSucceeded:
        SKIP INSTRUCTION
        
        2.WhileStatement:
        SKIP INSTRUCTION
        
        2.1.ConditionClause:
        PUSH LITERAL `true`
        JUMP TO 2.WhileStatementDone ON FALSE
        
        2.1.1.EvaluateStatement:
        LOAD VARIABLE $bar
        STORE VARIABLE $foo
        
        2.1.2.IfStatement:
        SKIP INSTRUCTION
        
        2.1.2.1.ConditionClause:
        PUSH PARAMETER $foo
        JUMP TO 2.1.2.2.ElseClause ON FALSE
        
        2.1.2.1.1.BreakStatement:
        JUMP TO 2.WhileStatementDone
        
        2.1.2.1.ConditionClauseDone:
        JUMP TO 2.1.2.IfStatementDone
        
        2.1.2.2.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.WithStatement:
        LOAD VARIABLE $sequence
        EXECUTE $getIterator ON TARGET
        STORE VARIABLE $$iterator-1
        
        2.1.2.2.1.1.ConditionClause:
        LOAD VARIABLE $$iterator-1
        EXECUTE $hasNext ON TARGET
        JUMP TO 2.1.2.2.1.WithStatementDone ON FALSE
        LOAD VARIABLE $$iterator-1
        EXECUTE $getNext ON TARGET
        STORE VARIABLE $item
        
        2.1.2.2.1.1.1.SelectStatement:
        LOAD VARIABLE $selection
        STORE VARIABLE $$selector-2
        
        2.1.2.2.1.1.1.1.OptionClause:
        LOAD VARIABLE $$selector-2
        PUSH LITERAL `$first`
        INVOKE $isMatchedBy WITH 2 PARAMETERS
        JUMP TO 2.1.2.2.1.1.1.2.OptionClause ON FALSE
        
        2.1.2.2.1.1.1.1.1.EvaluateStatement:
        PUSH LITERAL `true`
        STORE VARIABLE $$result
        
        2.1.2.2.1.1.1.1.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.2.OptionClause:
        LOAD VARIABLE $$selector-2
        PUSH LITERAL `$second`
        INVOKE $isMatchedBy WITH 2 PARAMETERS
        JUMP TO 2.1.2.2.1.1.1.3.ElseClause ON FALSE
        
        2.1.2.2.1.1.1.2.1.EvaluateStatement:
        PUSH LITERAL `false`
        STORE VARIABLE $$result
        
        2.1.2.2.1.1.1.2.OptionClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.3.ElseClause:
        SKIP INSTRUCTION
        
        2.1.2.2.1.1.1.3.1.ContinueStatement:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.1.1.3.ElseClauseDone:
        JUMP TO 2.1.2.2.1.1.1.SelectStatementDone
        
        2.1.2.2.1.1.1.SelectStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.1.ConditionRepeat:
        JUMP TO 2.1.2.2.1.1.ConditionClause
        
        2.1.2.2.1.WithStatementDone:
        SKIP INSTRUCTION
        
        2.1.2.2.ElseClauseDone:
        SKIP INSTRUCTION
        
        2.1.2.IfStatementDone:
        SKIP INSTRUCTION
        
        2.ConditionRepeat:
        JUMP TO 2.1.ConditionClause
        
        2.WhileStatementDone:
        LOAD VARIABLE $$result
        HANDLE RESULT
    "(
        $mediatype: "application/basm"
    )
    $bytecode: '
        202A60046005B044180D6005800428018005600AE800002860042802B046
        1819280380026005A81E80076007E000002800006005A00F2804600FB009
        B002A854D8018009280580022806E00000004000005E0000800A600A600A
        A00F28072808B009B002B0451845480060082809B0808008A00F280A280B
        B009B002280C600AB009B0028002005E800A600A600AA00F2807280DB009
        B002B045185D4800A00F280A280EB009B002280C600AB009B002800A600A
        E800005EE80000000000280F188C6006800B000038011869008C008A0000
        600ED00280016001D00418886001D003800C600D800360032810B045187C
        280F8002008660032811B04518832803800200860000006D00860000006D
        00000000000000606002E000
    '(
        $encoding: $base16
        $mediatype: "application/bcod"
    )
]
