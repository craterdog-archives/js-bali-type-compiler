[
    $description: "
        This abstract class defines the procedures for the messages that all collection components
        support.
    "($mediatype: "application/bsmd")
    $parent: /bali/abstractions/Component/v1
    $constants: [:]
    $procedures: [
        $addItem: [
            $description: "
                This procedure attempts to add the specified item to this collection.  The return
                value indicates whether or not the item was successfully added.
            "($mediatype: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $source: {
                throw [
                    $module: /bali/abstractions/Collection
                    $procedure: $addItem
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subclass."
                ]
            }($item: /bali/abstractions/Component/v1)
        ]
        $addItems: [
            $description: "
                This procedure attempts to add the specified sequence of items to this collection.
                The return value indicates the number of item that were successfully added.
            "($mediatype: "application/bsmd")
            $type: /bali/elements/Number/v1($range: [0..infinity])
            $source: {
                $count := 0
                $iterator := items.iterator()
                while iterator.hasNext() do {
                    $item := iterator.next()
                    if target.addItem(item) then {
                        $count := count + 1
                    }
                }
                return count
            }($items: /bali/interfaces/Sequential/v1)
        ]
        $containsAll: [
            $description: "
                This procedure determines whether or not this collection contains all of the
                specified items.
            "($mediatype: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $source: {
                $iterator := items.iterator()
                while iterator.hasNext() do {
                    $item := iterator.next()
                    if NOT target.containsItem(item) then {
                        return false
                    }
                }
                return true
            }($items: /bali/interfaces/Sequential/v1)
        ]
        $containsAny: [
            $description: "
                This procedure determines whether or not this collection contains any of the
                specified items.
            "($mediatype: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $source: {
                $iterator := items.iterator()
                while iterator.hasNext() do {
                    $item := iterator.next()
                    if target.containsItem(item) then {
                        return true
                    }
                }
                return false
            }($items: /bali/interfaces/Sequential/v1)
        ]
        $containsItem: [
            $description: "
                This procedure determines whether or not this collection contains the specified
                item.
            "($mediatype: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $source: {
                throw [
                    $module: /bali/abstractions/Collection
                    $procedure: $containsItem
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subclass."
                ]
            }($item: /bali/abstractions/Component/v1)
        ]
    ]
](
    $name: /bali/abstractions/Collection/v1
    $type: /bali/abstractions/Class/v1($existence: $abstract)
    $tag: #69KMNPGSBDXWLBATY5PR9GSNM9MV7GV2
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
